"use strict";
const initApi = (lineConfig, messageHandlerAsync) => {
    const { Router } = require('express');
    const { Client, middleware } = require('@line/bot-sdk');
    const { json } = require('body-parser');
    const lineClient = new Client(lineConfig);
    const eventHandlers = require('./eventHandlers')();
    const middlewareWrapper = require('./middlewareWrapper').default;
    const responder = require('./responder');
    const router = Router();
    // const lineMiddleware = middlewareWrapper(middleware(lineConfig))
    const lineMiddleware = middlewareWrapper(json());
    router.use(lineMiddleware);
    router.use('/', (req, res) => {
        let events = [].concat.apply([], req.body.events);
        let lnHandle = (parsedMessage, originalMessage) => {
            if (parsedMessage) {
                let replyToken = parsedMessage.replyToken;
                parsedMessage.source = 'line';
                return messageHandlerAsync(parsedMessage, originalMessage)
                    .then(response => response && responder(replyToken, response, lineClient))
                    .catch(console.error);
            }
        };
        return Promise.all(events.map(event => lnHandle(eventHandlers(event), event)))
            .then(() => res.send('OK')); // end of request)
    });
    return router;
};
module.exports = (lineConfig, messageHandlerAsync) => {
    try { // lazy loading
        return initApi(lineConfig, messageHandlerAsync);
    }
    catch (error) {
        console.error(error);
        console.error(error.stack);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2hhdGJvdHMvd2ViaG9vay9saW5lL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLE9BQU8sR0FBRyxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxFQUFFO0lBQ2xELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDckMsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFdkQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUN2QyxNQUFNLFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN6QyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFBO0lBQ2xELE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ2hFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUV4QyxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQTtJQUN2QixtRUFBbUU7SUFDbkUsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUVoRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzNCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksUUFBUSxHQUFHLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxFQUFFO1lBQ2hELElBQUksYUFBYSxFQUFFO2dCQUNqQixJQUFJLFVBQVUsR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDO2dCQUMxQyxhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtnQkFFN0IsT0FBTyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDO3FCQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7cUJBQ3pFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDeEI7UUFDSCxDQUFDLENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUMzRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsa0JBQWtCO0lBQ2xELENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDLENBQUE7QUFFRCxpQkFBUyxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxFQUFFO0lBQzNDLElBQUksRUFBRSxlQUFlO1FBQ25CLE9BQU8sT0FBTyxDQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0tBQ2hEO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzNCO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW5pdEFwaSA9IChsaW5lQ29uZmlnLCBtZXNzYWdlSGFuZGxlckFzeW5jKSA9PiB7XG4gIGNvbnN0IHsgUm91dGVyIH0gPSByZXF1aXJlKCdleHByZXNzJylcbiAgY29uc3QgeyBDbGllbnQsIG1pZGRsZXdhcmUgfSA9IHJlcXVpcmUoJ0BsaW5lL2JvdC1zZGsnKVxuXG4gIGNvbnN0IHsganNvbiB9ID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKVxuICBjb25zdCBsaW5lQ2xpZW50ID0gbmV3IENsaWVudChsaW5lQ29uZmlnKVxuICBjb25zdCBldmVudEhhbmRsZXJzID0gcmVxdWlyZSgnLi9ldmVudEhhbmRsZXJzJykoKVxuICBjb25zdCBtaWRkbGV3YXJlV3JhcHBlciA9IHJlcXVpcmUoJy4vbWlkZGxld2FyZVdyYXBwZXInKS5kZWZhdWx0XG4gIGNvbnN0IHJlc3BvbmRlciA9IHJlcXVpcmUoJy4vcmVzcG9uZGVyJylcblxuICBjb25zdCByb3V0ZXIgPSBSb3V0ZXIoKVxuICAvLyBjb25zdCBsaW5lTWlkZGxld2FyZSA9IG1pZGRsZXdhcmVXcmFwcGVyKG1pZGRsZXdhcmUobGluZUNvbmZpZykpXG4gIGNvbnN0IGxpbmVNaWRkbGV3YXJlID0gbWlkZGxld2FyZVdyYXBwZXIoanNvbigpKVxuXG4gIHJvdXRlci51c2UobGluZU1pZGRsZXdhcmUpXG4gIHJvdXRlci51c2UoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgICBsZXQgZXZlbnRzID0gW10uY29uY2F0LmFwcGx5KFtdLCByZXEuYm9keS5ldmVudHMpO1xuICAgIGxldCBsbkhhbmRsZSA9IChwYXJzZWRNZXNzYWdlLCBvcmlnaW5hbE1lc3NhZ2UpID0+IHtcbiAgICAgIGlmIChwYXJzZWRNZXNzYWdlKSB7XG4gICAgICAgIGxldCByZXBseVRva2VuID0gcGFyc2VkTWVzc2FnZS5yZXBseVRva2VuO1xuICAgICAgICBwYXJzZWRNZXNzYWdlLnNvdXJjZSA9ICdsaW5lJ1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlSGFuZGxlckFzeW5jKHBhcnNlZE1lc3NhZ2UsIG9yaWdpbmFsTWVzc2FnZSlcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZSAmJiByZXNwb25kZXIocmVwbHlUb2tlbiwgcmVzcG9uc2UsIGxpbmVDbGllbnQpKVxuICAgICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZXZlbnRzLm1hcChldmVudCA9PiBsbkhhbmRsZShldmVudEhhbmRsZXJzKGV2ZW50KSwgZXZlbnQpKSlcbiAgICAgIC50aGVuKCgpID0+IHJlcy5zZW5kKCdPSycpKSAvLyBlbmQgb2YgcmVxdWVzdClcbiAgfSlcbiAgcmV0dXJuIHJvdXRlclxufVxuXG5leHBvcnQgPSAobGluZUNvbmZpZywgbWVzc2FnZUhhbmRsZXJBc3luYykgPT4ge1xuICB0cnkgeyAvLyBsYXp5IGxvYWRpbmdcbiAgICByZXR1cm4gaW5pdEFwaShsaW5lQ29uZmlnLCBtZXNzYWdlSGFuZGxlckFzeW5jKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjaylcbiAgfVxufSJdfQ==